Index: arima.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pandas as pd\r\nimport numpy as np\r\nfrom database import retrieve_stock_prices\r\nimport plotly.express as px\r\nimport matplotlib.pyplot as plt\r\nfrom statsmodels.tsa.arima_model import ARIMA\r\nfrom statsmodels.tsa.stattools import adfuller\r\n\r\n# gets dataframe for a specific stock\r\ndf = retrieve_stock_prices(\"META\", \"03-03-2023\")\r\n\r\n# df = df[['Year', 'Month', 'Day', 'Close']].copy()\r\n\r\n# print (df)\r\n\r\nresult = adfuller(df.Close.dropna())\r\nprint(f\"ADF Stat: {result[0]}\")\r\nprint(f\"p-value: {result[1]}\")\r\n\r\n\r\n\r\n# print(df.iloc[0]['Close'])\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/arima.py b/arima.py
--- a/arima.py	(revision 3158090adc799a56f90984a280685a9ea3998231)
+++ b/arima.py	(date 1680078433718)
@@ -4,19 +4,61 @@
 import plotly.express as px
 import matplotlib.pyplot as plt
 from statsmodels.tsa.arima_model import ARIMA
-from statsmodels.tsa.stattools import adfuller
+from statsmodels.tsa.stattools import adfuller, arma_order_select_ic
+from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
+from pmdarima.arima.utils import ndiffs
 
 # gets dataframe for a specific stock
-df = retrieve_stock_prices("META", "03-03-2023")
+df = retrieve_stock_prices("META", "03-03-2003")
+
+df = df[['Date', 'Close']].copy()
+
+print(df)
+
+# uses Augmented Dicky Fuller test to see if stock series is stationary
+dftest = adfuller(df.Close.dropna())
+# the more negative the ADF stat, the stronger the rejection of the hypothesis
+print(f"ADF Stat: {dftest[0]}")
+# if p-value < .5 then we time series is stationary
+# if p-value > .5 then order of differencing needs to be found (d !=0)
+print(f"p-value: {dftest[1]}")
+print(f"# of lags: {dftest[2]}")
+print('Critical Values:')
+for key, value in dftest[4].items():
+    print('\t%s: %.3f' % (key, value))
+
+# time series is stationary when p-value < 0.05 and adf < critical value
+# when time series is stationary, d = 0
+if (dftest[1] < 0.05 and dftest[0] < dftest[4].get('1%') and
+        dftest[0] < dftest[4].get('5%') and dftest[0] < dftest[4].get('10%')):
+    print(f"p-value: {dftest[1]}")
+    d = 0
+# if time series is not stationary, then d needs to be calculated
+else:
+    # differencing value (d)
+    # an auto correlation function plot can find d value
+    d = ndiffs(df.Close, test="adf")
+print(d)
 
-# df = df[['Year', 'Month', 'Day', 'Close']].copy()
 
-# print (df)
+res = arma_order_select_ic(df.Close, ic=["aic"], trend="n")
+print(res['aic_min_order'])
 
-result = adfuller(df.Close.dropna())
-print(f"ADF Stat: {result[0]}")
-print(f"p-value: {result[1]}")
+# fig, ax = plt.subplots(figsize=(12,5))
+# plot_acf(df.Close.to_numpy(), lags=10, ax=ax)
+# plot_pacf(df.Close.to_numpy(), lags=8, method='ywm')
+# plt.show()
+# plot_pacf(df.Close.to_numpy(), lags=8, method='ywm')
+# plt.show()
 
+# Outputs graph of time series
+# fig = px.line(df, x='Date', y='Close')
+# fig.update_xaxes(rangeslider_visible=True)
+# fig.show()
+
+
+# p = order of the Auto Regressive term
+# the number of lags used as predictors
 
 
 # print(df.iloc[0]['Close'])
Index: database.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import finnhub\r\nimport pandas as pd\r\nfrom datetime import datetime\r\nimport datetime as dt\r\nimport time\r\nfrom stock_tickers import stock_tickers\r\n\r\n# Connect to Finnhub.io with API key\r\nfinnhub_client = finnhub.Client(api_key=\"cg7of21r01qgl488q6jgcg7of21r01qgl488q6k0\")\r\n\r\n\r\n# Function to check the input date is valid\r\ndef is_valid_date(date):\r\n    # lists containing months and there relative amount of days\r\n    days31 = [1, 3, 5, 7, 8, 10, 12]\r\n    days30 = [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\r\n\r\n    # pointers for day, month, year, and current year\r\n    date_list = date.split('-')\r\n    day = date_list[0]\r\n    month = date_list[1]\r\n    year = date_list[2]\r\n    curr_date = dt.date.today()\r\n    curr_year = curr_date.year\r\n\r\n    # check to ensure valid date\r\n    if not day.isnumeric() or not month.isnumeric() or not year.isnumeric():\r\n        return False\r\n    if int(day) > 31:\r\n        return False\r\n    if int(month) > 12:\r\n        return False\r\n    if int(year) > int(curr_year):\r\n        return False\r\n    if int(day) == 31 and int(month) not in days31:\r\n        return False\r\n    if int(day) == 30 and int(month) not in days30:\r\n        return False\r\n    if int(day) == 29 and int(month) not in days30 and int(year) % 4 != 0:\r\n        return False\r\n\r\n    return True\r\n\r\n\r\n# Function to obtain user input\r\ndef get_input():\r\n    ticker = input(\"Enter the stock ticker: \")\r\n    while ticker not in stock_tickers:\r\n        ticker = input(\"We do not have data for that stock in our database: \")\r\n\r\n    historical_date = input(\"What date would you like data to date back to (DD-MM-YYYY): \")\r\n\r\n    while not is_valid_date(historical_date):\r\n        historical_date = input(\"Please enter a valid date (DD-MM-YYYY): \")\r\n        is_valid_date(historical_date)\r\n\r\n    return ticker, historical_date\r\n\r\n\r\n# Function to retrieve stock prices for the stock input from the user\r\n# stock param is the ticker input from the user\r\n# start_date (MM-DD-YYYY) param is the date of how far the user wants to pull historical data from\r\n# return a dataframe containing the historical stock prices\r\n# the dataframe columns are Date, Open, High, Low, Close\r\n\r\n# example:\r\n# retrieve_stock_prices('AAPL', '01-01-2018')\r\n# returns a dataframe from January 1st, 2018 to current date containing the open, high, low, and close price for the\r\n# input stock for each day\r\n#             Date      Open     Close      High       Low\r\n# 0     2018-01-01   42.5400   43.0650   43.0750   42.3150\r\n# 1     2018-01-02   43.1325   43.0575   43.6375   42.9900\r\n# 2     2018-01-03   43.1350   43.2575   43.3675   43.0200\r\n# 3     2018-01-04   43.3600   43.7500   43.8425   43.2625\r\n# 4     2018-01-07   43.5875   43.5875   43.9025   43.4825\r\n\r\n# to manipulate the data:\r\n# mydf = retrieve_stock_prices('AAPL', '01-01-2018')\r\n# close_price = mydf['Close']\r\n\r\n# to loop through dataframe:\r\n# for i in range (len(mydf)):\r\n#   each_close_price = mydf.iloc[i]['Close']\r\n#   print(each_close_price)\r\n# df = df[['Year', 'Month', 'Day', 'Close']].copy()\r\ndef retrieve_stock_prices(stock, start_date):\r\n    # split the input date for month, day, year retrieval\r\n    date_string = start_date.split('-')\r\n\r\n    # split the string to get int values for month, day, year\r\n    start_month = int(date_string[0])\r\n    start_day = int(date_string[1])\r\n    start_year = int(date_string[2])\r\n\r\n    # convert start_date to datetime\r\n    start_dt = datetime(start_year, start_day, start_month, 0, 0)\r\n\r\n    # store start_date as UNIX timestamp\r\n    start_ts = int(time.mktime(start_dt.timetuple()))\r\n\r\n    # get current time\r\n    current_day = datetime.today()\r\n\r\n    # get current time timestamp\r\n    current_ts = int(time.mktime(current_day.timetuple()))\r\n\r\n    # make an API call to gather necessary data\r\n    stock_price_data = finnhub_client.stock_candles(stock, 'D', start_ts, current_ts)\r\n\r\n    # create lists to store data retrieved from API call\r\n    try:\r\n        open = stock_price_data['o']\r\n        close = stock_price_data['c']\r\n        high = stock_price_data['h']\r\n        low = stock_price_data['l']\r\n        # volume = stock_price_data['v']\r\n        ts = stock_price_data['t']\r\n\r\n        # lists to contain date breakdowns\r\n        days = []\r\n        months = []\r\n        years = []\r\n\r\n        # convert timestamps into dates\r\n        dates = []\r\n        for timestamp in ts:\r\n            date_string = str(datetime.fromtimestamp(timestamp))\r\n            date_to_add = date_string.split(' ')\r\n            # sub_date_to_add = date_to_add[0].split('-')\r\n            # years += [sub_date_to_add[0]]\r\n            # months += [sub_date_to_add[1]]\r\n            # days += [sub_date_to_add[2]]\r\n            dates += [date_to_add[0]]\r\n\r\n        # create dictionary to populate dataframe\r\n        data = {\r\n            'Date': dates,\r\n            'Open': open,\r\n            'Close': close,\r\n            'High': high,\r\n            'Low': low\r\n            # 'Volume': volume\r\n        }\r\n\r\n        # create dataframe with the retrieved data\r\n        df = pd.DataFrame(data)\r\n\r\n        return df\r\n    except KeyError:\r\n        print(f'Error Caught. SKIPPING {stock}. Index: {stock_tickers.index(stock)}')\r\n        pass\r\n\r\n    pass\r\n    # fig = px.line(df, x=\"Date\", y=\"Close\", title=\"Test\")\r\n    # fig.show()\r\n\r\n\r\n# function to display current day market data to the user\r\ndef market_data(stock):\r\n    # make API calls for each method needed to retrieve data\r\n    quote = finnhub_client.quote(stock)\r\n    financials = finnhub_client.company_basic_financials(stock, 'all')['metric']\r\n\r\n    # pointers to store all necessary market data for a stock\r\n    open = quote['o']\r\n    high = quote['h']\r\n    low = quote['l']\r\n    curr = quote['c']\r\n    year_high = financials.get('52WeekHigh')\r\n    year_low = financials.get('52WeekLow')\r\n    market_cap = financials.get('marketCapitalization')\r\n    pe = financials.get('peNormalizedAnnual')\r\n    dividend = financials.get('dividendPerShareAnnual')\r\n\r\n    data = {\r\n        'Open': open,\r\n        'High': high,\r\n        'Low': low,\r\n        'Current Price': curr,\r\n        'Mkt Cap': market_cap,\r\n        'P/E Ratio': pe,\r\n        'Div Yield': dividend,\r\n        '52-wk High': year_high,\r\n        '52-wk Low': year_low\r\n    }\r\n\r\n    df = pd.DataFrame(data, index=[0])\r\n\r\n    return df\r\n\r\n\r\nprint(retrieve_stock_prices('AAPL', '01-01-2018')['Close'])\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/database.py b/database.py
--- a/database.py	(revision 3158090adc799a56f90984a280685a9ea3998231)
+++ b/database.py	(date 1680053470931)
@@ -189,4 +189,4 @@
     return df
 
 
-print(retrieve_stock_prices('AAPL', '01-01-2018')['Close'])
+# print(retrieve_stock_prices('AAPL', '01-01-2018')['Close'])
Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
--- /dev/null	(date 1679344281254)
+++ b/.idea/.gitignore	(date 1679344281254)
@@ -0,0 +1,3 @@
+# Default ignored files
+/shelf/
+/workspace.xml
Index: .idea/COMP4960---Portfol.io.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/COMP4960---Portfol.io.iml b/.idea/COMP4960---Portfol.io.iml
new file mode 100644
--- /dev/null	(date 1679344530659)
+++ b/.idea/COMP4960---Portfol.io.iml	(date 1679344530659)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="PYTHON_MODULE" version="4">
+  <component name="NewModuleRootManager">
+    <content url="file://$MODULE_DIR$" />
+    <orderEntry type="jdk" jdkName="Python 3.11 (Giraffe)" jdkType="Python SDK" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
--- /dev/null	(date 1679344294004)
+++ b/.idea/modules.xml	(date 1679344294004)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/COMP4960---Portfol.io.iml" filepath="$PROJECT_DIR$/.idea/COMP4960---Portfol.io.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1679344530665)
+++ b/.idea/misc.xml	(date 1679344530665)
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.11 (Giraffe)" project-jdk-type="Python SDK" />
+</project>
\ No newline at end of file
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1679344294020)
+++ b/.idea/vcs.xml	(date 1679344294020)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/inspectionProfiles/profiles_settings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/inspectionProfiles/profiles_settings.xml b/.idea/inspectionProfiles/profiles_settings.xml
new file mode 100644
--- /dev/null	(date 1679344294033)
+++ b/.idea/inspectionProfiles/profiles_settings.xml	(date 1679344294033)
@@ -0,0 +1,6 @@
+<component name="InspectionProjectProfileManager">
+  <settings>
+    <option name="USE_PROJECT_PROFILE" value="false" />
+    <version value="1.0" />
+  </settings>
+</component>
\ No newline at end of file
